class name;;Method name;;number of detected pattern;;method Declaration;;parameter;;number of occurrences;;occurrenceType;;unitOnwhichOccurrenceIsDetected;;commentFragment
java.security.AccessControlContext;;<init>;;1;;public void <init>(java.security.ProtectionDomain[])
*;; * ;; * ;;*;;r1;;5
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$r3 = r1[0];;pattern detected param  r1 must not be null  because used in  ArrayRef 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$r7 = r1[i0];;pattern detected param  r1 must not be null  because used in  ArrayRef 
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$r8 = r1[i0];;pattern detected param  r1 must not be null  because used in  ArrayRef 
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$r9 = r1[i0];;pattern detected param  r1 must not be null  because used in  ArrayRef 
java.security.AccessControlContext;;<init>;;1;;public void <init>(java.security.AccessControlContext, java.security.DomainCombiner)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r5 = r1.<java.security.AccessControlContext: java.security.ProtectionDomain[] context>;;pattern detected param  r1 must not be null  because used in  FieldRef 
java.security.AccessControlContext;;checkPermission;;1;;public void checkPermission(java.security.Permission) throws java.security.AccessControlException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.AccessControlContext;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;6
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r4 = r2.<java.security.AccessControlContext: java.security.ProtectionDomain[] context>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r5 = r2.<java.security.AccessControlContext: java.security.ProtectionDomain[] context>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$z3 = specialinvoke r2.<java.security.AccessControlContext: boolean containsAllPDs(java.security.AccessControlContext)>(r0);;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r7 = r2.<java.security.AccessControlContext: java.security.DomainCombiner combiner>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r8 = r2.<java.security.AccessControlContext: java.security.DomainCombiner combiner>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r10 = r2.<java.security.AccessControlContext: java.security.DomainCombiner combiner>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
java.security.AccessController;;checkPermission;;1;;public static void checkPermission(java.security.Permission) throws java.security.AccessControlException
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r0 must not be null  ## otherwise an exception is thrown 
java.security.CodeSource;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r4 = r2.<java.security.CodeSource: java.net.URL location>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r6 = r2.<java.security.CodeSource: java.net.URL location>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
java.security.Policy;;getInstance;;1;;public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters, java.security.Provider) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.Policy;;implies;;1;;public boolean implies(java.security.ProtectionDomain, java.security.Permission)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r10 = r1.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;;pattern detected param  r1 must not be null  because used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r17 = r1.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;;pattern detected param  r1 must not be null  because used in  FieldRef 
java.security.CodeSigner;;<init>;;1;;public void <init>(java.security.cert.CertPath, java.security.Timestamp)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.Provider;;putService;;1;;protected synchronized void putService(java.security.Provider$Service)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r20;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.Provider;;removeService;;1;;protected synchronized void removeService(java.security.Provider$Service)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r15;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.AlgorithmParameters;;getInstance;;1;;public static java.security.AlgorithmParameters getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.AlgorithmParameterGenerator;;getInstance;;1;;public static java.security.AlgorithmParameterGenerator getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.Security;;insertProviderAt;;1;;public static synchronized int insertProviderAt(java.security.Provider, int)
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r1 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();;pattern detected param  r0 must not be null  because used in  InvokeExpr 
java.security.Security;;getProviders;;1;;public static java.security.Provider[] getProviders(java.lang.String)
*;; * ;; * ;;*;;r0;;3
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
java.security.Security;;getProviders;;1;;public static java.security.Provider[] getProviders(java.util.Map)
*;; * ;; * ;;*;;r0;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r12 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
java.security.Security;;getFilterComponents;;2;;static java.lang.String[] getFilterComponents(java.lang.String, java.lang.String)
*;; * ;; * ;;*;;r0;;6
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i8, i1);;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$i2 = virtualinvoke r1.<java.lang.String: int length()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.MessageDigest;;getInstance;;1;;public static java.security.MessageDigest getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.MessageDigest;;update;;1;;public void update(byte[], int, int)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.MessageDigest;;update;;1;;public final void update(java.nio.ByteBuffer)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.MessageDigest;;digest;;1;;public int digest(byte[], int, int) throws java.security.DigestException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.MessageDigest;;isEqual;;2;;public static boolean isEqual(byte[], byte[])
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$b5 = r0[i1];;pattern detected param  r0 must not be null  because used in  ArrayRef 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ArrayRef for param;;$b6 = r1[i1];;pattern detected param  r1 must not be null  because used in  ArrayRef 
java.security.MessageDigestSpi;;engineUpdate;;1;;protected void engineUpdate(java.nio.ByteBuffer)
*;; * ;; * ;;*;;r1;;9
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r8, 0, i9);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.CertPath;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r5 = virtualinvoke r2.<java.security.cert.CertPath: java.lang.String getType()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r4 = virtualinvoke r2.<java.security.cert.CertPath: java.util.List getCertificates()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
java.security.Identity;;addCertificate;;1;;public void addCertificate(java.security.Certificate) throws java.security.KeyManagementException
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r6 = interfaceinvoke r1.<java.security.Certificate: java.security.PublicKey getPublicKey()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r8 = interfaceinvoke r1.<java.security.Certificate: java.security.PublicKey getPublicKey()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.Identity;;equals;;1;;public final boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r4 = virtualinvoke r2.<java.security.Identity: java.lang.String fullName()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
java.security.Identity;;identityEquals;;1;;protected boolean identityEquals(java.security.Identity)
*;; * ;; * ;;*;;r1;;4
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r3 = r1.<java.security.Identity: java.lang.String name>;;pattern detected param  r1 must not be null  because used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r5 = r1.<java.security.Identity: java.security.PublicKey publicKey>;;pattern detected param  r1 must not be null  because used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r7 = r1.<java.security.Identity: java.security.PublicKey publicKey>;;pattern detected param  r1 must not be null  because used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for param;;$r9 = r1.<java.security.Identity: java.security.PublicKey publicKey>;;pattern detected param  r1 must not be null  because used in  FieldRef 
java.security.IdentityScope;;getIdentity;;1;;public java.security.Identity getIdentity(java.security.Principal)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = interfaceinvoke r1.<java.security.Principal: java.lang.String getName()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.spec.EncodedKeySpec;;<init>;;1;;public void <init>(byte[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.KeyStore;;getInstance;;1;;public static java.security.KeyStore getInstance(java.lang.String, java.security.Provider) throws java.security.KeyStoreException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.KeyStore;;getEntry;;1;;public final java.security.KeyStore$Entry getEntry(java.lang.String, java.security.KeyStore$ProtectionParameter) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException, java.security.KeyStoreException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.KeyStoreSpi;;engineSetEntry;;2;;public void engineSetEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r7 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();;pattern detected param  r3 must not be null it define a local r4which used in  InvokeExpr 
*;; * ;; * ;;*;;r2;;5
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r9 = virtualinvoke r5.<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>();;pattern detected param  r2 must not be null it define a local r5which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r13 = virtualinvoke $r12.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();;pattern detected param  r2 must not be null it define a local $r12which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r16 = virtualinvoke $r15.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>();;pattern detected param  r2 must not be null it define a local $r15which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r20 = virtualinvoke $r19.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();;pattern detected param  r2 must not be null it define a local $r19which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r26 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();;pattern detected param  r2 must not be null  because used in  InvokeExpr 
java.security.UnresolvedPermission;;<init>;;1;;public void <init>(java.lang.String, java.lang.String, java.lang.String, java.security.cert.Certificate[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.UnresolvedPermission;;resolve;;1;;java.security.Permission resolve(java.security.Permission, java.security.cert.Certificate[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.UnresolvedPermission;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;14
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r4 = r2.<java.security.UnresolvedPermission: java.lang.String type>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r6 = r2.<java.security.UnresolvedPermission: java.lang.String name>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r8 = r2.<java.security.UnresolvedPermission: java.lang.String name>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r10 = r2.<java.security.UnresolvedPermission: java.lang.String actions>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r12 = r2.<java.security.UnresolvedPermission: java.lang.String actions>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r14 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r16 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r18 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r20 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r23 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r26 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r28 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r29 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r31 = r2.<java.security.UnresolvedPermission: java.security.cert.Certificate[] certs>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
java.security.UnresolvedPermissionCollection;;add;;1;;public void add(java.security.Permission)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r14 = virtualinvoke r3.<java.security.UnresolvedPermission: java.lang.String getName()>();;pattern detected param  r1 must not be null it define a local r3which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r18 = virtualinvoke r3.<java.security.UnresolvedPermission: java.lang.String getName()>();;pattern detected param  r1 must not be null it define a local r3which used in  InvokeExpr 
java.security.UnresolvedPermissionCollection;;getUnresolvedPermissions;;1;;java.util.List getUnresolvedPermissions(java.security.Permission)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.Signature;;getInstance;;1;;public static java.security.Signature getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");;pattern detected param  r0 must not be null  because used in  InvokeExpr 
java.security.Signature;;getInstance;;1;;public static java.security.Signature getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");;pattern detected param  r0 must not be null  because used in  InvokeExpr 
java.security.Signature;;getInstance;;2;;public static java.security.Signature getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
*;; * ;; * ;;*;;r0;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");;pattern detected param  r0 must not be null  because used in  InvokeExpr 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.Signature;;initVerify;;1;;public final void initVerify(java.security.cert.Certificate) throws java.security.InvalidKeyException
*;; * ;; * ;;*;;r1;;3
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r3 = virtualinvoke r2.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r4 = virtualinvoke r2.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r6 = virtualinvoke r1.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.Signature;;sign;;1;;public final int sign(byte[], int, int) throws java.security.SignatureException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.Signature;;update;;1;;public final void update(java.nio.ByteBuffer) throws java.security.SignatureException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.SignatureSpi;;engineUpdate;;1;;protected void engineUpdate(java.nio.ByteBuffer)
*;; * ;; * ;;*;;r1;;9
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r4, 0, i8);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.SignedObject;;verify;;1;;public boolean verify(java.security.PublicKey, java.security.Signature) throws java.security.InvalidKeyException, java.security.SignatureException
*;; * ;; * ;;*;;r2;;3
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r2.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);;pattern detected param  r2 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r2.<java.security.Signature: void update(byte[])>($r5);;pattern detected param  r2 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$z0 = virtualinvoke r2.<java.security.Signature: boolean verify(byte[])>($r8);;pattern detected param  r2 must not be null  because used in  InvokeExpr 
java.security.Signer;;setKeyPair;;1;;public final void setKeyPair(java.security.KeyPair) throws java.security.InvalidParameterException, java.security.KeyException
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r1.<java.security.KeyPair: java.security.PublicKey getPublic()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r3 = virtualinvoke r1.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.URIParameter;;<init>;;1;;public void <init>(java.net.URI)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.CertPathHelperImpl;;implSetPathToNames;;1;;protected void implSetPathToNames(java.security.cert.X509CertSelector, java.util.Set)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.security.cert.X509CertSelector: void setPathToNamesInternal(java.util.Set)>(r2);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.CertPathHelperImpl;;implSetDateAndTime;;1;;protected void implSetDateAndTime(java.security.cert.X509CRLSelector, java.util.Date, long)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;virtualinvoke r1.<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date,long)>(r2, l0);;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CertSelector;;addSubjectAlternativeName;;1;;public void addSubjectAlternativeName(int, byte[]) throws java.io.IOException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CertSelector;;addPathToName;;1;;public void addPathToName(int, byte[]) throws java.io.IOException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CertSelector;;match;;1;;public boolean match(java.security.cert.Certificate)
*;; * ;; * ;;*;;r1;;8
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r8 = virtualinvoke r2.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r12 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r15 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r25 = virtualinvoke r2.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r30 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r35 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;virtualinvoke r2.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>($r39);;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;$r44 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
java.security.cert.X509CRLSelector;;addIssuer;;1;;public void addIssuer(javax.security.auth.x500.X500Principal)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = virtualinvoke r1.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CRLSelector;;addIssuerName;;1;;public void addIssuerName(byte[]) throws java.io.IOException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CRLSelector;;match;;1;;public boolean match(java.security.cert.CRL)
*;; * ;; * ;;*;;r1;;4
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r3 = virtualinvoke r2.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r15 = virtualinvoke r2.<java.security.cert.X509CRL: byte[] getExtensionValue(java.lang.String)>("2.5.29.20");;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r37 = virtualinvoke r2.<java.security.cert.X509CRL: java.util.Date getThisUpdate()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r38 = virtualinvoke r2.<java.security.cert.X509CRL: java.util.Date getNextUpdate()>();;pattern detected param  r1 must not be null it define a local r2which used in  InvokeExpr 
java.security.cert.CertPathValidatorException;;<init>;;2;;public void <init>(java.lang.String, java.lang.Throwable, java.security.cert.CertPath, int, java.security.cert.CertPathValidatorException$Reason)
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r4;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r9;;pattern detected param  r4 must not be null  ## otherwise an exception is thrown 
java.security.cert.CollectionCertStoreParameters;;<init>;;1;;public void <init>(java.util.Collection)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.LDAPCertStoreParameters;;<init>;;1;;public void <init>(java.lang.String, int)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.PKIXParameters;;<init>;;1;;public void <init>(java.security.KeyStore) throws java.security.KeyStoreException, java.security.InvalidAlgorithmParameterException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.PKIXParameters;;setTrustAnchors;;1;;public void setTrustAnchors(java.util.Set) throws java.security.InvalidAlgorithmParameterException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.PKIXCertPathBuilderResult;;<init>;;1;;public void <init>(java.security.cert.CertPath, java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.PKIXCertPathValidatorResult;;<init>;;2;;public void <init>(java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey)
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.TrustAnchor;;<init>;;1;;public void <init>(java.security.cert.X509Certificate, byte[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.cert.TrustAnchor;;<init>;;2;;public void <init>(java.lang.String, java.security.PublicKey, byte[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.cert.PolicyQualifierInfo;;<init>;;1;;public void <init>(byte[]) throws java.io.IOException
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CRL;;getRevokedCertificate;;1;;public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;r2 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r4 = virtualinvoke r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.cert.X509CRLEntry;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for local initialized from param;;r3 = virtualinvoke $r4.<java.security.cert.X509CRLEntry: byte[] getEncoded()>();;pattern detected param  r1 must not be null it define a local $r4which used in  InvokeExpr 
java.security.spec.ECParameterSpec;;<init>;;3;;public void <init>(java.security.spec.EllipticCurve, java.security.spec.ECPoint, java.math.BigInteger, int)
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.EllipticCurve;;<init>;;3;;public void <init>(java.security.spec.ECField, java.math.BigInteger, java.math.BigInteger, byte[])
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r7;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.EllipticCurve;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;3
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r4 = r2.<java.security.spec.EllipticCurve: java.security.spec.ECField field>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r6 = r2.<java.security.spec.EllipticCurve: java.math.BigInteger a>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r8 = r2.<java.security.spec.EllipticCurve: java.math.BigInteger b>;;pattern detected param  r1 must not be null it define a local r2which used in  FieldRef 
java.security.spec.ECPoint;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r5 = $r4.<java.security.spec.ECPoint: java.math.BigInteger x>;;pattern detected param  r1 must not be null it define a local $r4which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r8 = $r7.<java.security.spec.ECPoint: java.math.BigInteger y>;;pattern detected param  r1 must not be null it define a local $r7which used in  FieldRef 
java.security.spec.RSAOtherPrimeInfo;;<init>;;3;;public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.ECFieldF2m;;<init>;;1;;public void <init>(int, int[])
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.spec.ECFieldF2m;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;2
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$i1 = $r2.<java.security.spec.ECFieldF2m: int m>;;pattern detected param  r1 must not be null it define a local $r2which used in  FieldRef 
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r5 = $r4.<java.security.spec.ECFieldF2m: int[] ks>;;pattern detected param  r1 must not be null it define a local $r4which used in  FieldRef 
java.security.spec.ECFieldFp;;<init>;;1;;public void <init>(java.math.BigInteger)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;InvokeExpr for param;;$i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();;pattern detected param  r1 must not be null  because used in  InvokeExpr 
java.security.spec.ECFieldFp;;equals;;1;;public boolean equals(java.lang.Object)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;FieldRef for local initialized from param;;$r4 = $r3.<java.security.spec.ECFieldFp: java.math.BigInteger p>;;pattern detected param  r1 must not be null it define a local $r3which used in  FieldRef 
java.security.spec.ECGenParameterSpec;;<init>;;1;;public void <init>(java.lang.String)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.spec.ECPrivateKeySpec;;<init>;;2;;public void <init>(java.math.BigInteger, java.security.spec.ECParameterSpec)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.ECPublicKeySpec;;<init>;;2;;public void <init>(java.security.spec.ECPoint, java.security.spec.ECParameterSpec)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r3;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r4;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.MGF1ParameterSpec;;<init>;;1;;public void <init>(java.lang.String)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r2;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
java.security.spec.PSSParameterSpec;;<init>;;2;;public void <init>(java.lang.String, java.lang.String, java.security.spec.AlgorithmParameterSpec, int, int)
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r5;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r6;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
java.security.spec.RSAMultiPrimePrivateCrtKeySpec;;<init>;;8;;public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.security.spec.RSAOtherPrimeInfo[])
*;; * ;; * ;;*;;r8;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r17;;pattern detected param  r8 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r7;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r16;;pattern detected param  r7 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r3;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r12;;pattern detected param  r3 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r4;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r13;;pattern detected param  r4 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r5;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r14;;pattern detected param  r5 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r6;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r15;;pattern detected param  r6 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r1;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r10;;pattern detected param  r1 must not be null  ## otherwise an exception is thrown 
*;; * ;; * ;;*;;r2;;1
*;;*;;*;;*;;*;;*;;ThrowStmt for param;;throw $r11;;pattern detected param  r2 must not be null  ## otherwise an exception is thrown 
